---
title: MySQL for VMware Tanzu Recommended Usage and Limitations
owner: MySQL
---

<strong><%= modified_date %></strong>

## <a id="usecases"></a> Recommended Use Cases

MySQL is a powerful open-source relational database used by apps since the mid-90s.
Developers have relied on MySQL as a first step to storing, processing and sharing data.
As its user community has grown, MySQL has become a robust system capable of handling a wide variety of use cases and very significant workloads.
Unlike other traditional databases which centralize and consolidate data,
MySQL lends itself to dedicated deployment supporting the “shared nothing” context of building apps in the cloud.

##<a id="ondemand"></a> About On-Demand Plans
* Each on-demand plan instance is deployed to its own VM and is suitable for production workloads.
* The maximum-number of on-demand plan instances available to developers is set by the operator and enforced on both a global and per-plan level quota.
  The global quota cannot exceed 200.
* Operators can update the plan settings, including the VM size and disk size after the plans have been created.
**Operators should not downsize the VMs or disk size as this can cause data loss in pre-existing instances.**
* All plans deploy a single VM of the specified size with the specified disk type.
* Cannot scale down the size of VMs on the plan once deployed (this protects against data loss).
* The default maximum number of connections is set at 750.

## <a id="resources"></a> Resource Usage Planning for On-Demand Plans

For information on setting limits and calculating costs for on-demand service instances,
see [Setting Limits for On-Demand Service Instances](./set-quotas.html).

##<a id="azs"></a> Availability Using Multiple AZs

<%= vars.product_full %> supports configuring multiple availability zones.
For more information, see [About Availability Zones](./index.html#other-notes).

##<a id="downtime"></a> Downtime During Redeploys

By default, <%= vars.product_short %> does a rolling deploy during upgrades or when you apply
configuration changes.
For single node and leader-follower plans, this results in <%= vars.product_short %>
being inaccessible to apps for a brief period of time.

If you are using a HA cluster plan, <%= vars.product_short %> uses rolling redeploys
and your service does not incur downtime.
You can mitigate downtime by using HA cluster plans.

For more information about downtime in <%= vars.product_short %>,
see [RPOs and RTOs](.//availability-options.html#rpo-and-rto).

##<a id="persistent"></a> Persistent Disk Usage

The persistent disk receives, temporarily stores and encrypts MySQL backups.
This results in increased disk usage while backups are being processed.
For single node and leader-follower service plans, backups are processed on the MySQL VM.
For highly available (HA) clusters, backups are processed on the jumpbox VM.

In addition to backups, the persistent disk also stores InnoDB redo logs and binlogs. InnoDB redo logs use
a static amount of disk size. If your app is write-heavy,
increase your persistent disk to accommodate the binlogs.

Use the following table to determine the amount of persistent disk space you need
to set when you configure a service plan.
For instructions for configuring service plans,
see [Configure Service Plans](./install-config.html#active).

For all persistent disks except the HA cluster jumpbox disk, your **Total Disk Size** must 
be greater than 5 GB.

<table>
  <tr>
    <th>Persistent Disk</th>
    <th width=35%>Modifier for Copied Backups, Compression, and Encryption</th>
    <th>InnoDB Redo Logs</th>
    <th>Total Disk Size&#42;</th>
  </tr>
  <tr>
    <td><strong>Single Node</strong></td>
    <td>3</td>
    <td>512 MB</td>
    <td>3N + 512 MB</td>
  </tr>

  <tr>
    <td><strong>Leader-Follower</strong></td>
    <td>3</td>
    <td>512 MB</td>
    <td>3N + 512 MB</td>
  </tr>

  <tr>
    <td><strong>HA Cluster Jumpbox</strong></td>
    <td>2</td>
    <td>2 GB</td>
    <td>2N + 2 GB</td>
  </tr>

  <tr>
    <td><strong>HA Cluster Node</strong></td>
    <td><i>n/a</i></td>
    <td>2 GB</td>
    <td>N + 2 GB</td>
  </tr>

</table>
&#42; In the **Total Disk Size** formula, `N` is the maximum amount of app data that a developer needs.
Remember to include binlogs in your size estimate for app data.

The following diagram shows how persistent disk space is used in the single node and leader-follower topologies
and in the HA cluster topology:

<!-- Edit the below diagram here: https://docs.google.com/presentation/d/1G-4BYAt0TI7XIXlS8ahHWzgnAZX6-8Ux9B9y73JV9u4/edit?usp=sharing -->

<a href="./images/disk-lf-ha.png" target="_blank">
  <img alt="Persistent Disk diagram. The information depicted in the diagram is in the persistent disk table above" src="./images/disk-lf-ha.png"/>
</a>

<a href="./images/disk-lf-ha.png" aria-hidden="true" target="_blank">View a larger version of this diagram.</a>
